import React, { Component } from 'react';import {    StyleSheet,    Text,    View,    TextInput,    TouchableOpacity,    Dimensions,    InteractionManager,    Platform,    Image,    ScrollView,    Linking,    AppState} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import service from '../../../service'import { showToast, ErrorHandle, Header } from '../../mesosphere';import { OverlaySpinner } from '../../../component/tips';import stylesConfig from '../../../assets/styles';const { width, height } = Dimensions.get('window');const isIOS = Platform.OS === 'ios' ? true : false;class RechargeResult extends Component {    static navigationOptions = {        header: null    };    constructor(props){        super(props);        this.state = {            isConnecting: false,            rechargeResult: {},            appState: AppState.currentState,            buttonValue: '查询充值结果',            isDisabled: false,            timing: 0        };        this.timer = null;        this.navigation = props.navigation;        this.navigate = props.navigation.navigate;        this.rechargeInfo = props.navigation.state.params;        this.countTime = 0;        this.getRechargeResult = this.getRechargeResult.bind(this);        this.toggleSpinner = this.toggleSpinner.bind(this);        this.handleAppStateChange = this.handleAppStateChange.bind(this);        this.onButtonPress = this.onButtonPress.bind(this);        this.startTiming = this.startTiming.bind(this);    }    toggleSpinner (status) {        this.setState({            isConnecting: status !== undefined ? status : !this.state.isConnecting        })    }    getRechargeResult () {        this.toggleSpinner(true);        service.getRechargeInfo({orderNo: this.rechargeInfo.orderNo})            .then(res => this.setState({rechargeResult: res.data}, () => {console.log('充值结果===', res)}))            .then(() => this.toggleSpinner(false))            .catch(err => {                this.toggleSpinner(false);                ErrorHandle(err)            })    }    handleAppStateChange (nextAppState) {        if (this.state.appState.match(/inactive|background/) && nextAppState === 'active') {            this.getRechargeResult()        }        this.setState({appState: nextAppState});    };    onButtonPress () {        if (!!this.state.rechargeResult.status) {            this.navigate('PayIn');        } else {            this.startTiming();            this.getRechargeResult();        }    }    startTiming() {        this.countTime += 15;        this.setState({            timing: this.countTime        }, () => {            this.timer = setInterval(() => {                if (this.state.timing === 0) {                    clearInterval(this.timer);                    this.setState({                        isDisabled: false,                        buttonValue: '查询充值结果'                    });                } else {                    this.setState({                        isDisabled: true,                        timing: this.state.timing-1,                        buttonValue: `请在 ${this.state.timing} 秒后再次查询`                    });                }            }, 1000)        });    }    componentWillReceiveProps(nextProps) {        if (nextProps.isFocused) {            this.getRechargeResult();        }    }    componentDidMount () {        InteractionManager.runAfterInteractions(() => {            this.getRechargeResult();        });        AppState.addEventListener('change', this.handleAppStateChange)    }    componentWillUnmount () {        AppState.removeEventListener('change', this.handleAppStateChange);        this.timer && clearInterval(this.timer);    }    render () {        const { rechargeResult, isConnecting, buttonValue, isDisabled} = this.state;        const resultIcon = !!rechargeResult.status ? (rechargeResult.status === 1 ? 'check' : 'times') : 'ellipsis-h';        const resultText = !!rechargeResult.status ? (rechargeResult.status === 1 ? '充值成功' : '充值失败') : '充值未到账';        return (            <View style={styles.container}>                <Header headerTitle="充值结果" navigation={this.navigation} headerRight={this.headerRight}/>                <View style={styles.content}>                    <View style={[styles.infoItem, {alignItems: isIOS ? 'center' : 'flex-start'}]}>                        <View style={[styles.iconWarp,                            styles.warpBig,                            {marginTop: isIOS ? -2 : 0}]}>                            <Icon color="#FFF" name="cny" size={24}/>                        </View>                        <View style={styles.infoText}>                            <Text style={styles.status}>充值完成，已提交成功</Text>                            <Text style={styles.subInfo}>充值金额：{rechargeResult.rechargeAmount} 元</Text>                        </View>                    </View>                    <View style={[styles.infoItem,                        isIOS && styles.pt20,                        { borderLeftColor: '#FF9F00' }]}>                        <View style={[styles.iconWarp, styles.warpSmall, {                            backgroundColor: '#FF9F00'}]}>                            <Icon name="ellipsis-h" color="#FFF" size={18}/>                        </View>                        <View style={[styles.infoText,                            {borderLeftColor: !isIOS && !!rechargeResult.status ? '#FF9F00': '#D2D2D2'}]}>                            <Text style={styles.status}>努力充值中</Text>                            <Text style={styles.subInfo}>如果您已支付，预计1分钟到账，如未到账请联系客服</Text>                        </View>                    </View>                    <View style={[styles.infoItem,                        isIOS && styles.pt20,                        {paddingBottom: 0},                        {borderLeftColor: rechargeResult.status !== 2 ? '#D2D2D2' : '#FF9F00'}]}>                        <View style={[styles.iconWarp, styles.warpSmall, {marginBottom: -2},                            {backgroundColor:  rechargeResult.status !== 2 ? '#D2D2D2' : '#FF9F00'}]}>                            <Icon color="#FFF" size={18} name={resultIcon}  />                        </View>                        <View style={[styles.infoText,                            {paddingBottom: 0},                            {borderLeftColor: !isIOS && rechargeResult.status !== 2 ? '#D2D2D2' : '#FF9F00' }]}>                            <Text style={styles.status}>{resultText}</Text>                        </View>                    </View>                </View>                <View style={styles.btnWrap}>                    <TouchableOpacity                        style={[styles.nextStepInner,                            { backgroundColor: !isDisabled ? stylesConfig.activeBtn.bg : stylesConfig.disableBtn.bg } ]}                        onPress={() => {!isDisabled && this.onButtonPress()}}                        activeOpacity={!isDisabled ? 0.5 : 1}>                        <Text style={[styles.nextStepTxt, !isDisabled ? {color: '#fff'} : null]}>                            {!!rechargeResult.status ? "完成" : buttonValue}                         </Text>                    </TouchableOpacity>                </View>                <OverlaySpinner visible= {isConnecting} />            </View>        )    }}const styles = StyleSheet.create({    container: {        flex: 1,        backgroundColor: '#FFF',    },    pt20: {        paddingTop: 20,    },    content: {        marginVertical: 40,        paddingLeft: isIOS ? 60 : 40,        paddingRight: 20,    },    infoItem: {        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',        paddingBottom: isIOS ? 20 : 0,        borderLeftWidth: isIOS ? 2 : 0,        borderLeftColor: '#FF9F00',        paddingLeft: isIOS? 0 : 24,    },    iconWarp: {        justifyContent: 'center',        alignItems: 'center',        backgroundColor: '#FF9F00',    },    warpBig: {        width: 46,        height: 46,        borderRadius: 23,        marginLeft: -24,    },    warpSmall: {        width: 30,        height: 30,        borderRadius: 15,        marginLeft: -16,        marginRight: 8    },    infoText: {        flex: 1,        flexDirection: 'column',        justifyContent: 'center',        alignItems: 'flex-start',        paddingTop: 5,        paddingLeft: isIOS ? 20 : 44,        marginLeft: isIOS ? 0 : -24,        paddingBottom: isIOS ? 0 : 20,        borderLeftWidth: isIOS ? 0 : 2,        borderLeftColor: '#FF9F00',    },    status: {        fontSize: 20,        fontWeight: 'bold',        color: '#666',        paddingBottom: 5,    },    subInfo: {        fontSize: 14,        color: '#666',    },    appBtn: {        marginHorizontal: 20    },    btnWrap: {        marginTop: 20,        height: 35,        alignItems: 'center',        justifyContent: 'center',    },    nextStepInner: {        flex: 1,        width: width / 1.08,        alignItems: 'center',        justifyContent: 'center',        backgroundColor: '#DFDFE9',        borderRadius: 5,    },    nextStepTxt: {        color: '#9898A8',        fontWeight: 'bold',        fontSize: 16,    },});export default RechargeResult;